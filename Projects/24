import pygame
import random
import time

# Родительский класс шарика
class Ball:
    def __init__(self, display):
        self.display = display
        self.color = pygame.Color('red')
        self.center_x = 100
        self.center_y = 100
        self.radius = 30

        self.vx = 2
        self.vy = 2

    # Вывести шарик
    def show(self):
        pygame.draw.circle(self.display, self.color, (self.center_x, self.center_y), self.radius)

    # Присваиваем координаты клика мышью по окну желтому шарику
    def go(self):
        self.center_x += self.vx
        self.center_y += self.vy

    # Закрашиваем белым  предыдущие иттерации анимации шарика
    def clear(self):
        pygame.draw.circle(self.display, pygame.Color('white'), (self.center_x, self.center_y), self.radius)

    # Движение шарика
    def move(self):
        self.clear()
        self.go()
        self.show()

    # Нулевая скорость движения
    def stop(self):
        self.vx = 0
        self.vy = 0
        


# Генерируем рандомное положение шарика( шарик не выходит за границы окна)
class RandomPointBall(Ball):
    def __init__(self, display):
        super().__init__(display)
        
        self.color = pygame.Color('green')
        
        width, height = display.get_size()
        self.center_x = random.randint(self.radius, width - self.radius)
        self.center_y = random.randint(self.radius, height - self.radius)



# Закрашиваем желтым место клика по окну
class PointBall(Ball):
    def __init__(self, display, x, y):
        super().__init__(display)
        
        self.color = pygame.Color('yellow')
        
        self.center_x = x
        self.center_y = y

# Задаём шарикам начальную скорость
class RandomPointMovebleBall(RandomPointBall):
    def __init__(self, display):
        super().__init__(display)
        
        self.vx = random.choice([-3, 3])
        self.vy = random.choice([-3, 3])
        
class BillyardBall(RandomPointBall):
    def __init__(self, display):
        super().__init__(display)
        self.color = pygame.Color('green')
        
    def go(self):
        super().go()
        count = 0

        width, height = self.display.get_size()
        if self.center_x <= self.radius or self.center_x >= width - self.radius:
            self.vx = -self.vx

            if self.center_x <= self.radius:
                ball.color = pygame.Color('black')
                count += 1
                print(count)
            if self.center_x >= width - self.radius:
                ball.color = pygame.Color('yellow')
                count += 1
                print(count)
        if self.center_y <= self.radius or self.center_y >= height - self.radius:
            self.vy = -self.vy
            
            if self.center_y <= self.radius:
                ball.color = pygame.Color('orange')
                count += 1
                print(count)                
            if self.center_y >= height - self.radius:
                ball.color = pygame.Color('pink')
                count += 1
                print(count)                
                


# Инициализируем начало игры
pygame.init()
counter = 0
# Задаём размеры, цвет окна, а также генерируем 10 шаров синего цвета
width = 700
height = 400
display = pygame.display.set_mode((width, height))
display.fill(pygame.Color('white'))

balls = []
for i in range(5):
    ball = RandomPointMovebleBall(display)  # рандомное движение шара
    ball.show()  # Выводим шарик
    balls.append(ball)  # добавляем каждый шарик в массив balls
    
    ball = BillyardBall(display)  # рандомное движение шара
    ball.show()  # Выводим шарик
    balls.append(ball)  # добавляем каждый шарик в массив balls    

pygame.display.flip()  # Обновляет игровую область

time.sleep(1)

clock = pygame.time.Clock()  # Делаем заморозку в 1 секунду
while True:
    event_list = pygame.event.get()  # Получаем все события внутри pygame

    # Создаёт анимацию движения
    for ball in balls:
        ball.move()
    # Обновляем игровую область
    pygame.display.flip()
    # Плавность 60 кадров в секунду
    clock.tick(60)
        
    for event in event_list:
        # Отслеживаем выход из игры
        if event.type == pygame.QUIT:
            pygame.quit()
        # Отслеживаем нажатие мышью по игровой области
        if event.type == pygame.MOUSEBUTTONDOWN:
            for ball in balls:
                ball.stop()
                
    for ball in balls:
        ball.move()

    # Обновляем игровую область
    pygame.display.flip()
    # Плавность 60 кадров в секунду
    clock.tick(60)

    font = pygame.font.SysFont('serif', 36)
    text = font.render('Hello Привет', True,
                      (255, 255, 255))
    display.blit(text, (200, 20))

print('score: ', score)

